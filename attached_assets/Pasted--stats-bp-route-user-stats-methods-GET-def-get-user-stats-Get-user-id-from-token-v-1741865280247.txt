@stats_bp.route('/user_stats', methods=['GET'])
def get_user_stats():
    # Get user_id from token validation or session
    auth_header = request.headers.get('Authorization')
    user_id = None

    if auth_header and auth_header.startswith('Bearer '):
        token = auth_header.split(' ')[1]
        try:
            user_id = validate_token(token)
        except ValueError as e:
            return jsonify({"error": str(e)}), 401

    # If no token or invalid token, check session
    if not user_id:
        user_id = session.get('user_id')

    if not user_id:
        return jsonify({"error": "Authentication required"}), 401

    try:
        with get_db_connection() as conn:
            cursor = conn.cursor()

            # Get the user's stats from user_stats table
            cursor.execute(
                '''
                SELECT * FROM user_stats
                WHERE user_id = ?
            ''', (user_id, ))

            stats_row = cursor.fetchone()

            # If no stats exist yet, initialize with defaults
            if not stats_row:
                return jsonify({
                    "user_id": user_id,
                    "current_streak": 0,
                    "max_streak": 0,
                    "current_noloss_streak": 0,
                    "max_noloss_streak": 0,
                    "total_games_played": 0,
                    "cumulative_score": 0,
                    "highest_weekly_score": 0,
                    "last_played_date": None,
                    "weekly_stats": {
                        "score": 0,
                        "games_played": 0
                    },
                    "top_scores": []
                })

            # Convert the row to a dictionary
            stats_dict = dict(stats_row)

            # Calculate weekly stats on-the-fly
            # Get the start of the current week (Monday)
            today = datetime.datetime.now().date()
            start_of_week = today - datetime.timedelta(days=today.weekday())

            cursor.execute(
                '''
                SELECT SUM(score) as weekly_score, COUNT(*) as games_count
                FROM game_scores
                WHERE user_id = ? 
                AND date(created_at) >= date(?)
            ''', (user_id, start_of_week))

            weekly_data = cursor.fetchone()

            weekly_score = weekly_data[
                'weekly_score'] if weekly_data and weekly_data[
                    'weekly_score'] is not None else 0
            weekly_games = weekly_data[
                'games_count'] if weekly_data and weekly_data[
                    'games_count'] is not None else 0

            # Prepare weekly stats
            weekly_stats = {
                "score": weekly_score,
                "games_played": weekly_games
            }

            # Get top 5 scores for personal stats
            cursor.execute(
                '''
                SELECT score, difficulty, time_taken, created_at 
                FROM game_scores
                WHERE user_id = ? AND completed = 1
                ORDER BY score DESC
                LIMIT 5
            ''', (user_id, ))

            top_scores = []
            for row in cursor.fetchall():
                top_scores.append({
                    "score": row['score'],
                    "difficulty": row['difficulty'],
                    "time_taken": row['time_taken'],
                    "date": row['created_at']
                })

            # Prepare the response
            response = {
                "user_id":
                user_id,
                "current_streak":
                stats_dict.get('current_streak', 0),
                "max_streak":
                stats_dict.get('max_streak', 0),
                "current_noloss_streak":
                stats_dict.get('current_noloss_streak', 0),
                "max_noloss_streak":
                stats_dict.get('max_noloss_streak', 0),
                "total_games_played":
                stats_dict.get('total_games_played', 0),
                "cumulative_score":
                stats_dict.get('cumulative_score', 0),
                "highest_weekly_score":
                stats_dict.get('highest_weekly_score',
                               stats_dict.get('highest_monthly_score', 0)),
                "last_played_date":
                stats_dict.get('last_played_date'),
                "weekly_stats":
                weekly_stats,
                "top_scores":
                top_scores
            }

            return jsonify(response)

    except Exception as e:
        logging.error(f"Error getting user stats: {e}")
        return jsonify({"error": "Failed to retrieve user statistics"}), 500